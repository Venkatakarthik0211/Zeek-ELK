AWSTemplateFormatVersion: '2010-09-09'
Description: Python Architecture - VPC-2.0
Resources:
  PythonVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: PVPC

  snreservedA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.0.0/20
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: snreservedA

  sndatabaseA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.16.0/20
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: sndatabaseA

  snappA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.32.0/20
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: snappA

  snwebA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.48.0/20
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: snwebA

  snreservedB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.64.0/20
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: snreservedB

  sndatabaseB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.80.0/20
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: sndatabaseB

  snappB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.96.0/20
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: snappB

  snwebB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.112.0/20
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: snwebB

  snreservedC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.128.0/20
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: snreservedC

  sndatabaseC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.144.0/20
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: sndatabaseC

  snappC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.160.0/20
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: snappC

  snwebC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PythonVPC
      CidrBlock: 10.16.176.0/20
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: snwebC

  PIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: PIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PythonVPC
      InternetGatewayId: !Ref PIGW

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PythonVPC
      Tags:
        - Key: Name
          Value: RouteTablePublic

  RouteTablePublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref PIGW

  RouteTableAssociationwebA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref snwebA
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationwebB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref snwebB
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationwebC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref snwebC
      RouteTableId: !Ref RouteTablePublic

  # NAT Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro # Adjust instance type as needed
      ImageId: ami-0f5f51aa7a8ab4517 # Specify your desired AMI ID
      SubnetId: !Ref snwebA # Place instance in the snwebA subnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup # Reference to security group allowing ports 22 and 80
      Tags:
        - Key: Name
          Value: EC2Instance

  # NAT Instance Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref PythonVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # Allow SSH from NAT EC2 instance (adjust as needed)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allow HTTP from anywhere (adjust as needed)
      Tags:
        - Key: Name
          Value: InstanceSecurityGroup

  # Route Table to route traffic to NAT instance
  RouteTableDatabasePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PythonVPC
      Tags:
        - Key: Name
          Value: RouteTablePrivate

  RouteTableDatabasePrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableDatabasePrivate
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref EC2Instance
      Tags:
        - Key: Name
          Value: RouteDatabasePrivate

  RouteTableAssociationDatabaseA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sndatabaseA
      RouteTableId: !Ref RouteTableDatabasePrivate

  RouteTableAssociationDatabaseB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sndatabaseB
      RouteTableId: !Ref RouteTableDatabasePrivate

  RouteTableAssociationDatabaseC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sndatabaseC
      RouteTableId: !Ref RouteTableDatabasePrivate

  RouteTableAppPrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PythonVPC
      Tags:
        - Key: Name
          Value: RouteTableAppPrivate

  RouteTableAppPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableAppPrivate
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref EC2Instance
      Tags:
        - Key: Name
          Value: RouteAppPrivate

  RouteTableAssociationAppA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref snappA
      RouteTableId: !Ref RouteTableAppPrivate

  RouteTableAssociationAppB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref snappB
      RouteTableId: !Ref RouteTableAppPrivate

  RouteTableAssociationAppC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref snappC
      RouteTableId: !Ref RouteTableAppPrivate

  RouteTableReservedPrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PythonVPC
      Tags:
        - Key: Name
          Value: RouteTableReservedPrivate

  RouteTableReservedPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableReservedPrivate
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref EC2Instance
      Tags:
        - Key: Name
          Value: RouteReservedPrivate

  RouteTableAssociationReservedA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref snreservedA
      RouteTableId: !Ref RouteTableReservedPrivate

  RouteTableAssociationReservedB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref snreservedB
      RouteTableId: !Ref RouteTableReservedPrivate

  RouteTableAssociationReservedC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref snreservedC
      RouteTableId: !Ref RouteTableReservedPrivate